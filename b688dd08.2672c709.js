(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{88:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return l})),n.d(a,"metadata",(function(){return i})),n.d(a,"toc",(function(){return c})),n.d(a,"default",(function(){return m}));var t=n(3),o=n(7),r=(n(0),n(93)),l={id:"quickstart",title:"Quickstart",hide_title:!0},i={unversionedId:"quickstart",id:"quickstart",isDocsHomePage:!1,title:"Quickstart",description:"Quickstart",source:"@site/../docs/quickstart.mdx",slug:"/quickstart",permalink:"/docs/quickstart",version:"current",lastUpdatedBy:"arielmirra",lastUpdatedAt:1609164773,sidebar:"docs",previous:{title:"What is AMF?",permalink:"/docs/amf"},next:{title:"Modularization",permalink:"/docs/modularization"}},c=[{value:"Before you begin",id:"before-you-begin",children:[]},{value:"Download the example",id:"download-the-example",children:[]},{value:"Build and install the AMF command-line tool",id:"build-and-install-the-amf-command-line-tool",children:[]},{value:"Defining an AML Dialect for a new type of metadata documents",id:"defining-an-aml-dialect-for-a-new-type-of-metadata-documents",children:[]},{value:"Parsing metadata documents",id:"parsing-metadata-documents",children:[]},{value:"Using vocabularies for custom semantics",id:"using-vocabularies-for-custom-semantics",children:[]},{value:"Validating metadata documents",id:"validating-metadata-documents",children:[]}],s={toc:c};function m(e){var a=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},s,n,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"quickstart"},"Quickstart"),Object(r.b)("p",null,"This tutorial covers installing all the tools you'll need to design metadata documents with AML and shows you how to get up and running quickly."),Object(r.b)("h2",{id:"before-you-begin"},"Before you begin"),Object(r.b)("p",null,"Prerequisites:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"JVM: version 7 or higher"),Object(r.b)("li",{parentName:"ul"},"SBT to build the AMF command-line")),Object(r.b)("h2",{id:"download-the-example"},"Download the example"),Object(r.b)("p",null,"You can download the example from the AML project ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/aml-org/examples"}),"examples repository")," in Github."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"\ngit clone https://github.com/aml-org/examples.git\ncd examples\n\n")),Object(r.b)("h2",{id:"build-and-install-the-amf-command-line-tool"},"Build and install the AMF command-line tool"),Object(r.b)("p",null,"Download AMF from its github repository and build AMF command-line (you will need ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://www.scala-sbt.org/"}),"Scala SBT"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"\ngit clone https://github.com/aml-org/amf.git\ncd amf\nsbt buildCommandLine\n\n")),Object(r.b)("p",null,"This will leave a versioned fat jar (amf-X.Y.Z-SNAPSHOT.jar) in the top-level repository of the project.\nCopy this jar file to the top-level of the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/aml-org/examples"}),"examples repository"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"\ncp ./amf-X.Y.Z-SNAPSHOT.jar ../examples/amf.jar\n\n")),Object(r.b)("h2",{id:"defining-an-aml-dialect-for-a-new-type-of-metadata-documents"},"Defining an AML Dialect for a new type of metadata documents"),Object(r.b)("p",null,"In this example we will define a new type of metadata document to exchange information about geographical locations."),Object(r.b)("p",null,"First, we will define a new type of AML Dialect describing the structure of the document, located in the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/aml-org/examples"}),"examples repository")," in the file ",Object(r.b)("inlineCode",{parentName:"p"},"aml/quickstart/dialects/places.yaml"),":"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"places.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"\n#%Dialect 1.0\n\ndialect: Places\nversion: 1.0\n\nexternal:\n  schema: http://schema.org/\n\nnodeMappings:\n\n  LocationNode:\n    classTerm: schema.Place\n    mapping:\n      name:\n        propertyTerm: schema.name\n        mandatory: true\n        range: string\n      image:\n        propertyTerm: schema.image\n        range: uri\n\ndocuments:\n  root:\n    encodes: LocationNode\n\n")),Object(r.b)("p",null,"The dialect is very simple. It just defines a document with a couple of nodes: one for the place, and the other for an image of the place. We are using the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"http://schema.org"}),"Schema.org")," vocabulary to provide the semantics of the metadata."),Object(r.b)("p",null,"You can check the validity of this AML Dialect using AMF. From the top-level directory of the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/aml-org/examples"}),"examples repository"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),'\nexamples [master] $ java -jar amf.jar validate -in "AML 1.0" -mime-in application/yaml file://aml/quickstart/dialects/places.yaml\n{\n  "@type": "http://www.w3.org/ns/shacl#ValidationReport",\n  "http://www.w3.org/ns/shacl#conforms": true\n}\n\n')),Object(r.b)("h2",{id:"parsing-metadata-documents"},"Parsing metadata documents"),Object(r.b)("p",null,"Having a valid AML Dialect, we can start using it to parse metadata documents with information about different places."),Object(r.b)("p",null,"For example, we can try the ",Object(r.b)("inlineCode",{parentName:"p"},"golden_gate.yaml")," document:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"golden_gate.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"\n#%Places 1.0\n\nname: Golden Gate\nimage: https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg\n\n")),Object(r.b)("p",null,"We can use AMF to parse and validate the example, passing as an argument the location of the dialect and dialect instance to be parsed:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),'\nexamples [master] $ java -jar amf.jar parse -ds file://aml/quickstart/dialects/places.yaml -in "AML 1.0" -mime-in application/yaml -ctx true file://aml/quickstart/golden_gate.yaml\n\n')),Object(r.b)("p",null,"The following JSON-LD document will be returned in the console:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-json"}),'\n[\n  {\n    "@id": "#",\n    "@type": [\n      "meta:DialectInstance",\n      "doc:Document",\n      "doc:Fragment",\n      "doc:Module",\n      "doc:Unit"\n    ],\n    "meta:definedBy": [\n      {\n        "@id": "file://aml/quickstart/dialects/places.yaml#"\n      }\n    ],\n    "doc:encodes": [\n      {\n        "@id": "#/",\n        "@type": [\n          "schema-org:Place",\n          "file://aml/quickstart/dialects/places.yaml#/declarations/LocationNode",\n          "meta:DialectDomainElement",\n          "doc:DomainElement"\n        ],\n        "schema-org:image": [\n          {\n            "@id": "https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg"\n          }\n        ],\n        "schema-org:name": [\n          {\n            "@value": "Golden Gate"\n          }\n        ]\n      }\n    ],\n    "@context": {\n      "@base": "file://aml/quickstart/golden_gate.yaml",\n      "doc": "http://a.ml/vocabularies/document#",\n      "meta": "http://a.ml/vocabularies/meta#",\n      "schema-org": "http://schema.org/"\n    }\n  }\n]\n\n')),Object(r.b)("p",null,Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://json-ld.org/"}),"JSON-LD")," is a ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://www.w3.org/TR/json-ld/"}),"W3C standard")," to store graphs of information with support for hyperlinks. JSON-LD is the native format for AMF-parsed graph models."),Object(r.b)("h2",{id:"using-vocabularies-for-custom-semantics"},"Using vocabularies for custom semantics"),Object(r.b)("p",null,"AML allows users to define the semantics for metadata documents in AML Vocabulary files."),Object(r.b)("p",null,"The file ",Object(r.b)("inlineCode",{parentName:"p"},"aml/quickstart/geolocation.yaml")," contains a vocabulary defining a few terms for a custom geolocation vocabulary:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"geolocation.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"\n#%Vocabulary 1.0\n\nvocabulary: Geolocation\n\nbase: http://myorg.com/vocabs/geo#\n\nclassTerms:\n\n  Point:\n    description: Single coordinate pair\n\n  Line:\n    description: Pair of points\n\n  Polygon:\n    description: contains at least 4 coordinate points\n\npropertyTerms:\n\n  position:\n    description: Geolocation of an element\n    range: Point\n\n  latitude:\n    description: Geographical latitude\n\n  longitude:\n    description: Geographical longitude\n\n")),Object(r.b)("p",null,"We could modify our dialect to generate a new version that uses the AML Vocabulary for geolocation we have just reviewed:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"places_2.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"\n#%Dialect 1.0\n\ndialect: Places\nversion: 1.1\n\nuses:\n  geo: ../vocabularies/geolocation.yaml\n\nexternal:\n  schema: http://schema.org/\n\nnodeMappings:\n\n  LocationNode:\n    classTerm: schema.Place\n    mapping:\n      name:\n        propertyTerm: schema.name\n        mandatory: true\n        range: string\n      image:\n        propertyTerm: schema.image\n        range: uri\n      location:\n        mandatory: true\n        propertyTerm: geo.position\n        range: CoordinatesNode\n\n  CoordinatesNode:\n    classTerm: geo.Point\n    mapping:\n      lat:\n        propertyTerm: geo.latitude\n        mandatory: true\n        range: double\n      long:\n        propertyTerm: geo.longitude\n        mandatory: true\n        range: double\n\ndocuments:\n  root:\n    encodes: LocationNode\n\n")),Object(r.b)("p",null,"Now, we can parse documents that include geographical coordinates like:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"golden_gate_2.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"\n#%Places 1.1\n\nname: Golden Gate\nimage: https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg\nlocation:\n  lat: 37.81\n  long: 122.5\n\n")),Object(r.b)("p",null,"The geographical information will appear in the graph using the semantic terms defined in our geolocation vocabulary:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),'\nexamples [master] $ java -jar amf.jar parse -ds file://aml/quickstart/dialects/places_2.yaml -in "AML 1.0" -mime-in application/yaml -ctx true file://aml/quickstart/golden_gate_2.yaml\n[\n  {\n    "@id": "#",\n    "@type": [\n      "meta:DialectInstance",\n      "doc:Document",\n      "doc:Fragment",\n      "doc:Module",\n      "doc:Unit"\n    ],\n    "meta:definedBy": [\n      {\n        "@id": "file://aml/quickstart/dialects/places_2.yaml#"\n      }\n    ],\n    "doc:encodes": [\n      {\n        "@id": "#/",\n        "@type": [\n          "schema-org:Place",\n          "file://aml/quickstart/dialects/places_2.yaml#/declarations/LocationNode",\n          "meta:DialectDomainElement",\n          "doc:DomainElement"\n        ],\n        "schema-org:image": [\n          {\n            "@id": "https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg"\n          }\n        ],\n        "schema-org:name": [\n          {\n            "@value": "Golden Gate"\n          }\n        ],\n        "http://myorg.com/vocabs/geo#position": [\n          {\n            "@id": "#/location",\n            "@type": [\n              "http://myorg.com/vocabs/geo#Point",\n              "file://aml/quickstart/dialects/places_2.yaml#/declarations/CoordinatesNode",\n              "meta:DialectDomainElement",\n              "doc:DomainElement"\n            ],\n            "http://myorg.com/vocabs/geo#longitude": [\n              {\n                "@value": 122.5\n              }\n            ],\n            "http://myorg.com/vocabs/geo#latitude": [\n              {\n                "@value": 37.81\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    "@context": {\n      "@base": "file://aml/quickstart/golden_gate_2.yaml",\n      "doc": "http://a.ml/vocabularies/document#",\n      "meta": "http://a.ml/vocabularies/meta#",\n      "schema-org": "http://schema.org/"\n    }\n  }\n]\n\n')),Object(r.b)("h2",{id:"validating-metadata-documents"},"Validating metadata documents"),Object(r.b)("p",null,"If we try to parse an invalid document, the parser will fail and return an error message with a list of errors and syntactic information about the location of the error.\nAs an example, you can try to parse the ",Object(r.b)("inlineCode",{parentName:"p"},"aml/quickstart/piccadilly_circus_error.yaml")," document in the examples. In this document, geographical coordinates are provided as strings instead of double values:"),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"piccadilly_circus_error.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),'\n#%Places 1.1\n\nname: Piccadilly Circus\nimage: https://commons.wikimedia.org/wiki/File:Open_Happiness_Piccadilly_Circus_Blue-Pink_Hour_120917-1126-jikatu.jpg#/media/File:Open_Happiness_Piccadilly_Circus_Blue-Pink_Hour_120917-1126-jikatu.jpg\nlocation:\n  lat: "51.30 N"\n  long: "0.8 W"\n\n')),Object(r.b)("p",null,"Parsing the document throws a textual error in the console:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"\nexamples [master] $ java -jar amf.jar parse -ds file://aml/quickstart/dialects/places_2.yaml -in \"AML 1.0\" -mime-in application/yaml -ctx true file://aml/quickstart/piccadilly_circus_error.yaml\nModel: file://aml/quickstart/piccadilly_circus_error.yaml#\nProfile: AMF\nConforms? false\nNumber of results: 2\n\nLevel: Violation\n\n- Source: http://a.ml/vocabularies/amf/parser#inconsistent-property-range-value\n  Message: Cannot find expected range for property http://myorg.com/vocabs/geo#latitude (lat). Found 'http://www.w3.org/2001/XMLSchema#string', expected 'http://www.w3.org/2001/XMLSchema#double'\n  Level: Violation\n  Target: file://aml/quickstart/piccadilly_circus_error.yaml#/location\n  Property: http://myorg.com/vocabs/geo#latitude\n  Position: Some(LexicalInformation([(6,7)-(6,16)]))\n\n- Source: http://a.ml/vocabularies/amf/parser#inconsistent-property-range-value\n  Message: Cannot find expected range for property http://myorg.com/vocabs/geo#longitude (long). Found 'http://www.w3.org/2001/XMLSchema#string', expected 'http://www.w3.org/2001/XMLSchema#double'\n  Level: Violation\n  Target: file://aml/quickstart/piccadilly_circus_error.yaml#/location\n  Property: http://myorg.com/vocabs/geo#longitude\n  Position: Some(LexicalInformation([(7,8)-(7,15)]))\n\n")),Object(r.b)("p",null,"To get the error report as a machine-friendly graph encoded using JSON-LD, the ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," AMF command must be used."))}m.isMDXComponent=!0},93:function(e,a,n){"use strict";n.d(a,"a",(function(){return p})),n.d(a,"b",(function(){return b}));var t=n(0),o=n.n(t);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function c(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),m=function(e){var a=o.a.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=m(e.components);return o.a.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return o.a.createElement(o.a.Fragment,{},a)}},u=o.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=m(n),u=t,b=p["".concat(l,".").concat(u)]||p[u]||d[u]||r;return n?o.a.createElement(b,i(i({ref:a},s),{},{components:n})):o.a.createElement(b,i({ref:a},s))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);