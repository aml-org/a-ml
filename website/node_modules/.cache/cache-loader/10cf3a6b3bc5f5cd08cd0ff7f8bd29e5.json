{"remainingRequest":"/Users/aloose/mulesoft/a-ml/website/node_modules/babel-loader/lib/index.js??ref--8-1!/Users/aloose/mulesoft/a-ml/components/CodeGetter.jsx","dependencies":[{"path":"/Users/aloose/mulesoft/a-ml/components/CodeGetter.jsx","mtime":1610720708388},{"path":"/Users/aloose/mulesoft/a-ml/website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aloose/mulesoft/a-ml/website/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20iL1VzZXJzL2Fsb29zZS9tdWxlc29mdC9hLW1sL3dlYnNpdGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UiO2ltcG9ydCBSZWFjdCx7Q29tcG9uZW50fWZyb20ncmVhY3QnO2ltcG9ydCBDb2RlQmxvY2sgZnJvbSdAdGhlbWUvQ29kZUJsb2NrJzt2YXIgQVBJPSdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYW1sLW9yZy8nO3ZhciBDb2RlR2V0dGVyPS8qI19fUFVSRV9fKi9mdW5jdGlvbihfQ29tcG9uZW50KXtfaW5oZXJpdHNMb29zZShDb2RlR2V0dGVyLF9Db21wb25lbnQpO2Z1bmN0aW9uIENvZGVHZXR0ZXIocHJvcHMpe3ZhciBfdGhpcztfdGhpcz1fQ29tcG9uZW50LmNhbGwodGhpcyxwcm9wcyl8fHRoaXM7X3RoaXMuc3RhdGU9e2NvZGU6JycsbGluZVN0YXJ0OjAsbGluZUVuZDowfTtyZXR1cm4gX3RoaXM7fXZhciBfcHJvdG89Q29kZUdldHRlci5wcm90b3R5cGU7X3Byb3RvLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dmFyIF90aGlzMj10aGlzO2ZldGNoKEFQSSt0aGlzLnByb3BzLmNvZGVVcmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiByZXNwb25zZS50ZXh0KCk7fSkudGhlbihmdW5jdGlvbih0ZXh0KXtjb25zb2xlLmxvZyh0ZXh0KTt2YXIgcmVzdWx0PXRleHQ7dmFyIHN0YXJ0PV90aGlzMi5wcm9wcy5saW5lU3RhcnQ7dmFyIGVuZD1fdGhpczIucHJvcHMubGluZUVuZDtpZihlbmQtc3RhcnQ+MCl7Y29uc29sZS5sb2coInNwbGl0dGluZyIpO3Jlc3VsdD1yZXN1bHQuc3BsaXQoJ1xuJykuc2xpY2Uoc3RhcnQsZW5kKS5qb2luKCdcbicpO31fdGhpczIuc2V0U3RhdGUoe2NvZGU6cmVzdWx0fSk7fSlbImNhdGNoIl0oZnVuY3Rpb24oZXJyb3Ipe3JldHVybiBjb25zb2xlLmVycm9yKGVycm9yKTt9KTt9O19wcm90by5yZW5kZXI9ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29kZUJsb2NrLHtjbGFzc05hbWU6dGhpcy5wcm9wcy5sYW5ndWFnZX0sdGhpcy5zdGF0ZS5jb2RlKTt9O3JldHVybiBDb2RlR2V0dGVyO30oQ29tcG9uZW50KTtleHBvcnQgZGVmYXVsdCBDb2RlR2V0dGVyOw=="},{"version":3,"sources":["/Users/aloose/mulesoft/a-ml/components/CodeGetter.jsx"],"names":["React","Component","CodeBlock","API","CodeGetter","props","state","code","lineStart","lineEnd","componentDidMount","fetch","codeUrl","then","response","text","console","log","result","start","end","split","slice","join","setState","error","render","language"],"mappings":"sHAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAOC,CAAAA,SAAP,KAAsB,kBAAtB,CAEA,GAAMC,CAAAA,GAAG,CAAG,4CAAZ,C,GAEMC,CAAAA,U,yEACF,oBAAYC,KAAZ,CAAmB,WACf,2BAAMA,KAAN,QACA,MAAKC,KAAL,CAAa,CACTC,IAAI,CAAE,EADG,CAETC,SAAS,CAAE,CAFF,CAGTC,OAAO,CAAE,CAHA,CAAb,CAFe,aAOlB,C,uCAEDC,iB,CAAA,4BAAoB,iBAChBC,KAAK,CAACR,GAAG,CAAG,KAAKE,KAAL,CAAWO,OAAlB,CAAL,CACKC,IADL,CACU,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADlB,EAEKF,IAFL,CAEU,SAAAE,IAAI,CAAI,CACVC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACA,GAAIG,CAAAA,MAAM,CAAGH,IAAb,CACA,GAAII,CAAAA,KAAK,CAAG,MAAI,CAACd,KAAL,CAAWG,SAAvB,CACA,GAAIY,CAAAA,GAAG,CAAG,MAAI,CAACf,KAAL,CAAWI,OAArB,CACA,GAAKW,GAAG,CAAGD,KAAP,CAAgB,CAApB,CAAuB,CACnBH,OAAO,CAACC,GAAR,CAAY,WAAZ,EACAC,MAAM,CAAGA,MAAM,CACVG,KADI,CACE,IADF,EAEJC,KAFI,CAEEH,KAFF,CAESC,GAFT,EAGJG,IAHI,CAGC,IAHD,CAAT,CAIH,CACD,MAAI,CAACC,QAAL,CAAc,CAACjB,IAAI,CAAEW,MAAP,CAAd,EACH,CAfL,WAgBW,SAAAO,KAAK,QAAIT,CAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd,CAAJ,EAhBhB,EAiBH,C,QAEDC,M,CAAA,iBAAS,CACL,mBACI,oBAAC,SAAD,EAAW,SAAS,CAAE,KAAKrB,KAAL,CAAWsB,QAAjC,EAA4C,KAAKrB,KAAL,CAAWC,IAAvD,CADJ,CAGH,C,qBAlCoBN,S,EAqCzB,cAAeG,CAAAA,UAAf","sourcesContent":["import React, {Component} from 'react';\nimport CodeBlock from '@theme/CodeBlock'\n\nconst API = 'https://raw.githubusercontent.com/aml-org/';\n\nclass CodeGetter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: '',\n            lineStart: 0,\n            lineEnd: 0\n        };\n    }\n\n    componentDidMount() {\n        fetch(API + this.props.codeUrl)\n            .then(response => response.text())\n            .then(text => {\n                console.log(text);\n                let result = text;\n                let start = this.props.lineStart;\n                let end = this.props.lineEnd;\n                if ((end - start) > 0) {\n                    console.log(\"splitting\");\n                    result = result\n                        .split('\\n')\n                        .slice(start, end)\n                        .join('\\n')\n                }\n                this.setState({code: result})\n            })\n            .catch(error => console.error(error));\n    }\n\n    render() {\n        return (\n            <CodeBlock className={this.props.language}>{this.state.code}</CodeBlock>\n        )\n    }\n}\n\nexport default CodeGetter;\n"]}]}