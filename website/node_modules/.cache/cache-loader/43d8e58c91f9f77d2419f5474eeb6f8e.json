{"remainingRequest":"/Users/aloose/mulesoft/a-ml/website/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/aloose/mulesoft/a-ml/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/aloose/mulesoft/a-ml/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/aloose/mulesoft/a-ml/docs/quickstart.mdx","dependencies":[{"path":"/Users/aloose/mulesoft/a-ml/docs/quickstart.mdx","mtime":1610720708395},{"path":"/Users/aloose/mulesoft/a-ml/website/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-quickstart-mdx-b68.json","mtime":1610721600898},{"path":"/Users/aloose/mulesoft/a-ml/website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aloose/mulesoft/a-ml/website/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/aloose/mulesoft/a-ml/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/aloose/mulesoft/a-ml/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/aloose/mulesoft/a-ml/docs/quickstart.mdx"],"names":["React","mdx","frontMatter","id","title","hide_title","metadata","toc","value","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'quickstart',\n\ttitle: 'Quickstart',\n\thide_title: true\n};\nexport const metadata = {\n  \"unversionedId\": \"quickstart\",\n  \"id\": \"quickstart\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Quickstart\",\n  \"description\": \"Quickstart\",\n  \"source\": \"@site/../docs/quickstart.mdx\",\n  \"slug\": \"/quickstart\",\n  \"permalink\": \"/docs/quickstart\",\n  \"version\": \"current\",\n  \"lastUpdatedBy\": \"Author\",\n  \"lastUpdatedAt\": 1539502055\n};\n  /* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const toc = [{\n  value: 'Before you begin',\n  id: 'before-you-begin',\n  children: []\n}, {\n  value: 'Download the example',\n  id: 'download-the-example',\n  children: []\n}, {\n  value: 'Build and install the AMF command-line tool',\n  id: 'build-and-install-the-amf-command-line-tool',\n  children: []\n}, {\n  value: 'Defining an AML Dialect for a new type of metadata documents',\n  id: 'defining-an-aml-dialect-for-a-new-type-of-metadata-documents',\n  children: []\n}, {\n  value: 'Parsing metadata documents',\n  id: 'parsing-metadata-documents',\n  children: []\n}, {\n  value: 'Using vocabularies for custom semantics',\n  id: 'using-vocabularies-for-custom-semantics',\n  children: []\n}, {\n  value: 'Validating metadata documents',\n  id: 'validating-metadata-documents',\n  children: []\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"quickstart\"\n    }}>{`Quickstart`}</h1>\n    <p>{`This tutorial covers installing all the tools you'll need to design metadata documents with AML and shows you how to get up and running quickly.`}</p>\n    <h2 {...{\n      \"id\": \"before-you-begin\"\n    }}>{`Before you begin`}</h2>\n    <p>{`Prerequisites:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`JVM: version 7 or higher`}</li>\n      <li parentName=\"ul\">{`SBT to build the AMF command-line`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"download-the-example\"\n    }}>{`Download the example`}</h2>\n    <p>{`You can download the example from the AML project `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/aml-org/examples\"\n      }}>{`examples repository`}</a>{` in Github.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\ngit clone https://github.com/aml-org/examples.git\ncd examples\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"build-and-install-the-amf-command-line-tool\"\n    }}>{`Build and install the AMF command-line tool`}</h2>\n    <p>{`Download AMF from its github repository and build AMF command-line (you will need `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.scala-sbt.org/\"\n      }}>{`Scala SBT`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\ngit clone https://github.com/aml-org/amf.git\ncd amf\nsbt buildCommandLine\n\n`}</code></pre>\n    <p>{`This will leave a versioned fat jar (amf-X.Y.Z-SNAPSHOT.jar) in the top-level repository of the project.\nCopy this jar file to the top-level of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/aml-org/examples\"\n      }}>{`examples repository`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\ncp ./amf-X.Y.Z-SNAPSHOT.jar ../examples/amf.jar\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defining-an-aml-dialect-for-a-new-type-of-metadata-documents\"\n    }}>{`Defining an AML Dialect for a new type of metadata documents`}</h2>\n    <p>{`In this example we will define a new type of metadata document to exchange information about geographical locations.`}</p>\n    <p>{`First, we will define a new type of AML Dialect describing the structure of the document, located in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/aml-org/examples\"\n      }}>{`examples repository`}</a>{` in the file `}<inlineCode parentName=\"p\">{`aml/quickstart/dialects/places.yaml`}</inlineCode>{`:`}</p>\n    <p><em parentName=\"p\">{`places.yaml`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`\n#%Dialect 1.0\n\ndialect: Places\nversion: 1.0\n\nexternal:\n  schema: http://schema.org/\n\nnodeMappings:\n\n  LocationNode:\n    classTerm: schema.Place\n    mapping:\n      name:\n        propertyTerm: schema.name\n        mandatory: true\n        range: string\n      image:\n        propertyTerm: schema.image\n        range: uri\n\ndocuments:\n  root:\n    encodes: LocationNode\n\n`}</code></pre>\n    <p>{`The dialect is very simple. It just defines a document with a couple of nodes: one for the place, and the other for an image of the place. We are using the `}<a parentName=\"p\" {...{\n        \"href\": \"http://schema.org\"\n      }}>{`Schema.org`}</a>{` vocabulary to provide the semantics of the metadata.`}</p>\n    <p>{`You can check the validity of this AML Dialect using AMF. From the top-level directory of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/aml-org/examples\"\n      }}>{`examples repository`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nexamples [master] $ java -jar amf.jar validate -in \"AML 1.0\" -mime-in application/yaml file://aml/quickstart/dialects/places.yaml\n{\n  \"@type\": \"http://www.w3.org/ns/shacl#ValidationReport\",\n  \"http://www.w3.org/ns/shacl#conforms\": true\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"parsing-metadata-documents\"\n    }}>{`Parsing metadata documents`}</h2>\n    <p>{`Having a valid AML Dialect, we can start using it to parse metadata documents with information about different places.`}</p>\n    <p>{`For example, we can try the `}<inlineCode parentName=\"p\">{`golden_gate.yaml`}</inlineCode>{` document:`}</p>\n    <p><em parentName=\"p\">{`golden_gate.yaml`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`\n#%Places 1.0\n\nname: Golden Gate\nimage: https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg\n\n`}</code></pre>\n    <p>{`We can use AMF to parse and validate the example, passing as an argument the location of the dialect and dialect instance to be parsed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nexamples [master] $ java -jar amf.jar parse -ds file://aml/quickstart/dialects/places.yaml -in \"AML 1.0\" -mime-in application/yaml -ctx true file://aml/quickstart/golden_gate.yaml\n\n`}</code></pre>\n    <p>{`The following JSON-LD document will be returned in the console:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\n[\n  {\n    \"@id\": \"#\",\n    \"@type\": [\n      \"meta:DialectInstance\",\n      \"doc:Document\",\n      \"doc:Fragment\",\n      \"doc:Module\",\n      \"doc:Unit\"\n    ],\n    \"meta:definedBy\": [\n      {\n        \"@id\": \"file://aml/quickstart/dialects/places.yaml#\"\n      }\n    ],\n    \"doc:encodes\": [\n      {\n        \"@id\": \"#/\",\n        \"@type\": [\n          \"schema-org:Place\",\n          \"file://aml/quickstart/dialects/places.yaml#/declarations/LocationNode\",\n          \"meta:DialectDomainElement\",\n          \"doc:DomainElement\"\n        ],\n        \"schema-org:image\": [\n          {\n            \"@id\": \"https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg\"\n          }\n        ],\n        \"schema-org:name\": [\n          {\n            \"@value\": \"Golden Gate\"\n          }\n        ]\n      }\n    ],\n    \"@context\": {\n      \"@base\": \"file://aml/quickstart/golden_gate.yaml\",\n      \"doc\": \"http://a.ml/vocabularies/document#\",\n      \"meta\": \"http://a.ml/vocabularies/meta#\",\n      \"schema-org\": \"http://schema.org/\"\n    }\n  }\n]\n\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://json-ld.org/\"\n      }}>{`JSON-LD`}</a>{` is a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/json-ld/\"\n      }}>{`W3C standard`}</a>{` to store graphs of information with support for hyperlinks. JSON-LD is the native format for AMF-parsed graph models.`}</p>\n    <h2 {...{\n      \"id\": \"using-vocabularies-for-custom-semantics\"\n    }}>{`Using vocabularies for custom semantics`}</h2>\n    <p>{`AML allows users to define the semantics for metadata documents in AML Vocabulary files.`}</p>\n    <p>{`The file `}<inlineCode parentName=\"p\">{`aml/quickstart/geolocation.yaml`}</inlineCode>{` contains a vocabulary defining a few terms for a custom geolocation vocabulary:`}</p>\n    <p><em parentName=\"p\">{`geolocation.yaml`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`\n#%Vocabulary 1.0\n\nvocabulary: Geolocation\n\nbase: http://myorg.com/vocabs/geo#\n\nclassTerms:\n\n  Point:\n    description: Single coordinate pair\n\n  Line:\n    description: Pair of points\n\n  Polygon:\n    description: contains at least 4 coordinate points\n\npropertyTerms:\n\n  position:\n    description: Geolocation of an element\n    range: Point\n\n  latitude:\n    description: Geographical latitude\n\n  longitude:\n    description: Geographical longitude\n\n`}</code></pre>\n    <p>{`We could modify our dialect to generate a new version that uses the AML Vocabulary for geolocation we have just reviewed:`}</p>\n    <p><em parentName=\"p\">{`places_2.yaml`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`\n#%Dialect 1.0\n\ndialect: Places\nversion: 1.1\n\nuses:\n  geo: ../vocabularies/geolocation.yaml\n\nexternal:\n  schema: http://schema.org/\n\nnodeMappings:\n\n  LocationNode:\n    classTerm: schema.Place\n    mapping:\n      name:\n        propertyTerm: schema.name\n        mandatory: true\n        range: string\n      image:\n        propertyTerm: schema.image\n        range: uri\n      location:\n        mandatory: true\n        propertyTerm: geo.position\n        range: CoordinatesNode\n\n  CoordinatesNode:\n    classTerm: geo.Point\n    mapping:\n      lat:\n        propertyTerm: geo.latitude\n        mandatory: true\n        range: double\n      long:\n        propertyTerm: geo.longitude\n        mandatory: true\n        range: double\n\ndocuments:\n  root:\n    encodes: LocationNode\n\n`}</code></pre>\n    <p>{`Now, we can parse documents that include geographical coordinates like:`}</p>\n    <p><em parentName=\"p\">{`golden_gate_2.yaml`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`\n#%Places 1.1\n\nname: Golden Gate\nimage: https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg\nlocation:\n  lat: 37.81\n  long: 122.5\n\n`}</code></pre>\n    <p>{`The geographical information will appear in the graph using the semantic terms defined in our geolocation vocabulary:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nexamples [master] $ java -jar amf.jar parse -ds file://aml/quickstart/dialects/places_2.yaml -in \"AML 1.0\" -mime-in application/yaml -ctx true file://aml/quickstart/golden_gate_2.yaml\n[\n  {\n    \"@id\": \"#\",\n    \"@type\": [\n      \"meta:DialectInstance\",\n      \"doc:Document\",\n      \"doc:Fragment\",\n      \"doc:Module\",\n      \"doc:Unit\"\n    ],\n    \"meta:definedBy\": [\n      {\n        \"@id\": \"file://aml/quickstart/dialects/places_2.yaml#\"\n      }\n    ],\n    \"doc:encodes\": [\n      {\n        \"@id\": \"#/\",\n        \"@type\": [\n          \"schema-org:Place\",\n          \"file://aml/quickstart/dialects/places_2.yaml#/declarations/LocationNode\",\n          \"meta:DialectDomainElement\",\n          \"doc:DomainElement\"\n        ],\n        \"schema-org:image\": [\n          {\n            \"@id\": \"https://en.wikipedia.org/wiki/Golden_Gate#/media/File:Golden_Gate_1.jpg\"\n          }\n        ],\n        \"schema-org:name\": [\n          {\n            \"@value\": \"Golden Gate\"\n          }\n        ],\n        \"http://myorg.com/vocabs/geo#position\": [\n          {\n            \"@id\": \"#/location\",\n            \"@type\": [\n              \"http://myorg.com/vocabs/geo#Point\",\n              \"file://aml/quickstart/dialects/places_2.yaml#/declarations/CoordinatesNode\",\n              \"meta:DialectDomainElement\",\n              \"doc:DomainElement\"\n            ],\n            \"http://myorg.com/vocabs/geo#longitude\": [\n              {\n                \"@value\": 122.5\n              }\n            ],\n            \"http://myorg.com/vocabs/geo#latitude\": [\n              {\n                \"@value\": 37.81\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"@context\": {\n      \"@base\": \"file://aml/quickstart/golden_gate_2.yaml\",\n      \"doc\": \"http://a.ml/vocabularies/document#\",\n      \"meta\": \"http://a.ml/vocabularies/meta#\",\n      \"schema-org\": \"http://schema.org/\"\n    }\n  }\n]\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validating-metadata-documents\"\n    }}>{`Validating metadata documents`}</h2>\n    <p>{`If we try to parse an invalid document, the parser will fail and return an error message with a list of errors and syntactic information about the location of the error.\nAs an example, you can try to parse the `}<inlineCode parentName=\"p\">{`aml/quickstart/piccadilly_circus_error.yaml`}</inlineCode>{` document in the examples. In this document, geographical coordinates are provided as strings instead of double values:`}</p>\n    <p><em parentName=\"p\">{`piccadilly_circus_error.yaml`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`\n#%Places 1.1\n\nname: Piccadilly Circus\nimage: https://commons.wikimedia.org/wiki/File:Open_Happiness_Piccadilly_Circus_Blue-Pink_Hour_120917-1126-jikatu.jpg#/media/File:Open_Happiness_Piccadilly_Circus_Blue-Pink_Hour_120917-1126-jikatu.jpg\nlocation:\n  lat: \"51.30 N\"\n  long: \"0.8 W\"\n\n`}</code></pre>\n    <p>{`Parsing the document throws a textual error in the console:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nexamples [master] $ java -jar amf.jar parse -ds file://aml/quickstart/dialects/places_2.yaml -in \"AML 1.0\" -mime-in application/yaml -ctx true file://aml/quickstart/piccadilly_circus_error.yaml\nModel: file://aml/quickstart/piccadilly_circus_error.yaml#\nProfile: AMF\nConforms? false\nNumber of results: 2\n\nLevel: Violation\n\n- Source: http://a.ml/vocabularies/amf/parser#inconsistent-property-range-value\n  Message: Cannot find expected range for property http://myorg.com/vocabs/geo#latitude (lat). Found 'http://www.w3.org/2001/XMLSchema#string', expected 'http://www.w3.org/2001/XMLSchema#double'\n  Level: Violation\n  Target: file://aml/quickstart/piccadilly_circus_error.yaml#/location\n  Property: http://myorg.com/vocabs/geo#latitude\n  Position: Some(LexicalInformation([(6,7)-(6,16)]))\n\n- Source: http://a.ml/vocabularies/amf/parser#inconsistent-property-range-value\n  Message: Cannot find expected range for property http://myorg.com/vocabs/geo#longitude (long). Found 'http://www.w3.org/2001/XMLSchema#string', expected 'http://www.w3.org/2001/XMLSchema#double'\n  Level: Violation\n  Target: file://aml/quickstart/piccadilly_circus_error.yaml#/location\n  Property: http://myorg.com/vocabs/geo#longitude\n  Position: Some(LexicalInformation([(7,8)-(7,15)]))\n\n`}</code></pre>\n    <p>{`To get the error report as a machine-friendly graph encoded using JSON-LD, the `}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{` AMF command must be used.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}