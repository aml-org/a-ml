(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return y}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),m=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=m(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=m(n),d=a,y=p["".concat(l,".").concat(d)]||p[d]||b[d]||i;return n?r.a.createElement(y,c(c({ref:t},o),{},{components:n})):r.a.createElement(y,c({ref:t},o))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var o=2;o<i;o++)l[o]=n[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"myStyle",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(109)),l={id:"async_raml_datatypes",title:"Async + RAML Data Types in AMF"},c={unversionedId:"related/async_raml_datatypes",id:"related/async_raml_datatypes",isDocsHomePage:!1,title:"Async + RAML Data Types in AMF",description:"This is a technical document, this information is intended for experienced users",source:"@site/../docs/related/async-raml-datatypes.mdx",slug:"/related/async_raml_datatypes",permalink:"/docs/related/async_raml_datatypes",version:"current",lastUpdatedBy:"arielmirra",lastUpdatedAt:1612286140,sidebar:"docs",previous:{title:"AMF Conversion",permalink:"/docs/related/amf_conversion"},next:{title:"Json Schema Draft 2019-09 to Draft 7 Emission",permalink:"/docs/related/json_schema_draft_2019_09_to_draft_7"}},s=[{value:"Referencing external RAML content using <code>$ref</code>",id:"referencing-external-raml-content-using-ref",children:[{value:"Reference to data type fragments",id:"reference-to-data-type-fragments",children:[]},{value:"Reference to types in library fragments",id:"reference-to-types-in-library-fragments",children:[]},{value:"Reference to external yaml/json files",id:"reference-to-external-yamljson-files",children:[]}]},{value:"Inlined RAML types",id:"inlined-raml-types",children:[{value:"Isolated RAML context",id:"isolated-raml-context",children:[]},{value:"Limited RAML referencing mechanism",id:"limited-raml-referencing-mechanism",children:[]}]}],o={padding:"15px 5px"},m={toc:s,myStyle:o};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Technical Document")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This is a technical document, this information is intended for experienced users"))),Object(i.b)("p",null,"Within the Async specification it is possible to use RAML data types to define a payload, taking into account that the schema format is specified accordingly.\nBoth specifications have their own distinct referencing and modularization mechanisms, and it is not clear where to draw the line to determine where one specification stops, and the other one starts.\nThis document will describe how to use RAML types in Async when using AMF."),Object(i.b)("h2",{id:"referencing-external-raml-content-using-ref"},"Referencing external RAML content using ",Object(i.b)("inlineCode",{parentName:"h2"},"$ref")),Object(i.b)("p",null,"In order to support referencing RAML content in external files, AMF allows the use of the ",Object(i.b)("inlineCode",{parentName:"p"},"$ref")," mechanism present in Async.\nThis enables referencing data type fragments, data types present in libraries, as well as any RAML content present in yaml or json files."),Object(i.b)("p",null,"However, the usage of ",Object(i.b)("inlineCode",{parentName:"p"},"$ref")," in this scenario has some restrictions. Given that the payload content must comply with RAML,\n",Object(i.b)("strong",{parentName:"p"},"the ",Object(i.b)("inlineCode",{parentName:"strong"},"$ref")," may only be used at the root of the payload definition as an exception to the RAML specification"),".\nIts target content must be valid structurally according to the relevant RAML specification:"),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="\u2018$ref\u2019 at root of payload (Valid)"',title:'"\u2018$ref\u2019',at:!0,root:!0,of:!0,payload:!0,'(Valid)"':!0}),"schemaFormat: application/RAML+yaml;version=1.0\npayload:\n  $ref: \u201c...\u201d # must reference raml content\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="\u2018$ref\u2019 nested within RAML content (Invalid)" {6}',title:'"\u2018$ref\u2019',nested:!0,within:!0,RAML:!0,content:!0,'(Invalid)"':!0,"{6}":!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n type: object\n properties:\n   user:\n     $ref: \u201c...\u201d # '$ref' is not valid in RAML\n"))))),Object(i.b)("p",null,"The following section shows all supported use cases when using this referencing mechanism, adding additional comments if necessary."),Object(i.b)("h3",{id:"reference-to-data-type-fragments"},"Reference to data type fragments"),Object(i.b)("p",null,"The data type fragment must be self-contained, meaning it cannot depend on any definition made in the root API. The following example is ",Object(i.b)("strong",{parentName:"p"},"valid")," for this use case."),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Async API"',title:'"Async','API"':!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n $ref: external-data-type.raml\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="RAML data type fragment (external-data-type.raml)"',title:'"RAML',data:!0,type:!0,fragment:!0,'(external-data-type.raml)"':!0}),"#%RAML 1.0 DataType\n\ntype: object\nproperties:\n  a: string | object\n"))))),Object(i.b)("p",null,"The following referenced data type is ",Object(i.b)("strong",{parentName:"p"},"invalid")," as it is not self-contained, meaning the data type fragment depends on type definitions which will not be resolved in the root API.\nDue to known limitations this API will not return any validations (error or warning), but the reference to the type ",Object(i.b)("inlineCode",{parentName:"p"},"Other")," inside the data type will not be made, leaving it unresolved."),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Async API"',title:'"Async','API"':!0}),"components:\n schemas:\n   Other: ...\nchannels:\n users/signup:\n   subscribe:\n     message:\n       schemaFormat: application/raml+yaml;version=1.0\n       payload:\n        $ref: external-data-type.raml\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="RAML data type fragment (external-data-type.raml)" {5}',title:'"RAML',data:!0,type:!0,fragment:!0,'(external-data-type.raml)"':!0,"{5}":!0}),"#%RAML 1.0 DataType\n\ntype: object\nproperties:\n a: Other\n"))))),Object(i.b)("p",null,"Use of relative pointers to nested content within the data type fragment is not supported, like in the following ",Object(i.b)("strong",{parentName:"p"},"invalid")," example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:"{3}","{3}":!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n $ref: external-data-type.raml#/properties/a\n")),Object(i.b)("h3",{id:"reference-to-types-in-library-fragments"},"Reference to types in library fragments"),Object(i.b)("p",null,"For the case of libraries, type definitions can be referenced using the following fixed pointer: ",Object(i.b)("inlineCode",{parentName:"p"},"{lib}#/types/{typeName}"),".\nWhen referencing types defined in a library, the included content will have context of other type definitions present in the original library.\nThis can be seen in the following ",Object(i.b)("strong",{parentName:"p"},"valid")," example where the type User references another type present in the external library."),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Async API"',title:'"Async','API"':!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n  $ref: ../external-library.raml#/types/User\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="RAML library fragment (external-library.raml)"',title:'"RAML',library:!0,fragment:!0,'(external-library.raml)"':!0}),"#%RAML 1.0 Library\n\ntypes:\n User:\n   type: Other | string\n\n Other:\n   type: string\n"))))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"The external library must be self-contained"),", meaning it cannot depend on types defined in the root API.\nIn the following ",Object(i.b)("strong",{parentName:"p"},"invalid")," example, the library depends on the definition of the type Other, which will not be resolved from the definitions present in the main API."),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Async API"',title:'"Async','API"':!0}),"components:\n schemas:\n   Other: ...\nchannels:\n users/signup:\n   subscribe:\n     message:\n       schemaFormat: application/raml+yaml;version=1.0\n       payload:\n        $ref: ../external-library.raml#/types/User\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="RAML library fragment (external-library.raml)" {5}',title:'"RAML',library:!0,fragment:!0,'(external-library.raml)"':!0,"{5}":!0}),"#%RAML 1.0 Library\n\ntypes:\n User:\n   type: Other | string\n"))))),Object(i.b)("h3",{id:"reference-to-external-yamljson-files"},"Reference to external yaml/json files"),Object(i.b)("p",null,"When referencing external yaml or json files, the ",Object(i.b)("inlineCode",{parentName:"p"},"$ref")," inlines the content.\nRelative json pointers can be used to reference content that is nested within the file, but taking into account the following limitation:"),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"When referencing to external yaml/json files")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"the external file ",Object(i.b)("strong",{parentName:"p"},"must not")," be a known RAML fragment or API specification."))),Object(i.b)("p",null,"The following case is a ",Object(i.b)("strong",{parentName:"p"},"valid")," reference making use of relative json pointers."),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Async API"',title:'"Async','API"':!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n $ref: external-yaml.yaml#/definitions/User\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Yaml file (external-yaml.yaml)"',title:'"Yaml',file:!0,'(external-yaml.yaml)"':!0}),"definitions:\n User:\n   type: string | object\n"))))),Object(i.b)("p",null,"As previously mentioned, when the target file is a known RAML fragment or API specification free use of relative json pointers is not supported.\nThe following example shows an ",Object(i.b)("strong",{parentName:"p"},"invalid")," example when using relative json pointer to reference an external RAML specification:"),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Async API"',title:'"Async','API"':!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n $ref: ../api.raml#/types/User\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="External RAML API (api.raml)" {1}',title:'"External',RAML:!0,API:!0,'(api.raml)"':!0,"{1}":!0}),"#%RAML 1.0\ntitle: Instagram API\n\ntypes:\n User:\n   type: object\n"))))),Object(i.b)("h2",{id:"inlined-raml-types"},"Inlined RAML types"),Object(i.b)("p",null,"The simplest way to define a RAML type in Async is by defining your content inlined under the ",Object(i.b)("inlineCode",{parentName:"p"},"payload")," facet while using the appropriate schema format like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"schemaFormat: application/raml+yaml;version=1.0\npayload: # The following is a RAML data type\n type: object\n properties:\n   a: object | string\n additionalProperties: false\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"All content within the payload will be considered strictly RAML"),", except when using \u2018$ref\u2019 at the root of the payload (see the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#referencing-external-raml-content-using-ref"}),"previous section")," for more details)."),Object(i.b)("h3",{id:"isolated-raml-context"},"Isolated RAML context"),Object(i.b)("p",null,"When defining inlined types, its context is fully restricted from the content defined outside the payload facet.\nThis means that any reference to content defined in the ",Object(i.b)("inlineCode",{parentName:"p"},"components")," facet of the main Async API will not be resolved."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Referencing types defined in async API components (invalid)" {10}',title:'"Referencing',types:!0,defined:!0,in:!0,async:!0,API:!0,components:!0,'(invalid)"':!0,"{10}":!0}),"components:\n schemas:\n   User: ...\nchannels:\n users/signup:\n   subscribe:\n     message:\n       schemaFormat: application/raml+yaml;version=1.0\n       payload:\n         type: User #unresolved reference\n")),Object(i.b)("h3",{id:"limited-raml-referencing-mechanism"},"Limited RAML referencing mechanism"),Object(i.b)("p",null,"RAML has its own referencing mechanism to include content from external files using a reserved yaml tag ",Object(i.b)("inlineCode",{parentName:"p"},"!include"),".\n",Object(i.b)("strong",{parentName:"p"},"AMF will only support referencing external data type fragments using the ",Object(i.b)("inlineCode",{parentName:"strong"},"!include")," tag."),"\nFurthermore, this will only work in Async APIs defined in yaml format, as json has no way of defining tags."),Object(i.b)("p",null,"As this syntax is valid within a RAML context, including data types fragments can be made at the root of the payload content,\nor nested within other inlined content:"),Object(i.b)("div",{className:"container"},Object(i.b)("div",{className:"row"},Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Using include at root of payload"',title:'"Using',include:!0,at:!0,root:!0,of:!0,'payload"':!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload: !include external-data-type.raml\n"))),Object(i.b)("div",{style:o,className:"col col--6"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="Using include within inlined content"',title:'"Using',include:!0,within:!0,inlined:!0,'content"':!0}),"schemaFormat: application/raml+yaml;version=1.0\npayload:\n type: object\n properties:\n   id: string\n   user: !include external-data-type.raml\n"))))))}p.isMDXComponent=!0}}]);